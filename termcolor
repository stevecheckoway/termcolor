#!/bin/bash

xterm_color() {
  local escrgb red green blue x y z oldstty
  exec 3<> /dev/tty
  oldstty=$(stty -g <&3)
  stty raw -echo min 0 <&3
  IFS=':/' read -t 1 -p $'\033]11;?\007' -d $'\007' -r escrgb red green blue 2>&3 <&3
  stty "${oldstty}" <&3
  exec 3>&-
  if [[ "${escrgb}" == $'\033]11;rgb' ]]; then
    # Each of red, green, and blue are 1, 2, 3, or 4 hexadecimal digits and they
    # may not even be the same length.
    # - If red is a single digit, then it represents the value R = red/15.
    # - If it is two digits, then it represents the value R = red/255.
    # - If it is three digits, then it represents the value R = red/4095.
    # - If it is four digits, then it represents the value R = red/65535.
    # In all cases, we have R in [0, 1]. Green and blue are similar.
    # If (R + G + B) / 3 < .5, then we say the background is dark, otherwise it
    # is light.
    #
    # Since Bash doesn't support fractional numbers, we need to work with
    # integers. Let x, y, and z be the integers such that
    #   R = red / x,
    #   G = green / y, and
    #   B = blue / z.
    # Note that x, y, and z are integers in {15, 255, 4095, 65535}.
    #
    # The LCM of 15, 255, 4095, and 65535 is 17891055.
    #
    # We can rewrite (R + G + B) / 3 < .5 as
    #   2*(R + G + B) < 3
    #   2*(R + G + B) * 17891055 < 3*17891055
    #   2*(red*(17891055/x)+green*(17891055/y)+blue*(17891055/z) < 3*17891055
    #
    # By construction, 17891055/15, 17891055/255, 17891055/4095, and
    # 17891055/65535 are all integers. Furthermore, all are less than 26 bits
    # so both sides of that inequality comfortably fit within a 32-bit signed
    # long, which is what Bash uses for integers.
    #
    # We can compute x, y, and z by the length of red, green, and blue.
    (( x = (1 << 4*${#red}) - 1 ))
    (( y = (1 << 4*${#green}) - 1 ))
    (( z = (1 << 4*${#blue}) - 1 ))
    if (( ("0x${red}"   * (35782110/x) + \
           "0x${green}" * (35782110/y) + \
           "0x${blue}"  * (35782110/z) ) < 53673165 )); then
      echo 'dark'
    else
      echo 'light'
    fi
  else
    return 1
  fi
}

case ${TERM_PROGRAM} in
  iTerm.app)
    xterm_color
    exit $?
    ;;
  Apple_Terminal)
    osascript "$(dirname "$0")/terminal.scpt" "$(tty)" 2>/dev/null
    exit $?
    ;;
esac

if [[ ${TERM} == xterm* && -n ${XTERM_VERSION} ]]; then
  xterm_color
  exit $?
fi

exit 1
